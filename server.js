// üéµ –°–ï–†–í–ï–† –î–õ–Ø –ú–£–ó–´–ö–ê–õ–¨–ù–û–ô –ü–õ–ê–¢–§–û–†–ú–´ SOUNDWAVE
// –ü—Ä–æ—Å—Ç–æ–π Node.js —Å–µ—Ä–≤–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º

const express = require('express');
const multer = require('multer');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// üîß –ù–ê–°–¢–†–û–ô–ö–ò
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-key-change-this';
const UPLOAD_DIR = 'uploads';
const DATA_DIR = 'data';
const AVATARS_DIR = path.join(UPLOAD_DIR, 'avatars');
const COVERS_DIR = path.join(UPLOAD_DIR, 'covers');
const TRACKS_DIR = path.join(UPLOAD_DIR, 'tracks');

// üìÅ –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô
const createDirectories = () => {
    [UPLOAD_DIR, DATA_DIR, AVATARS_DIR, COVERS_DIR, TRACKS_DIR].forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
    });
};

createDirectories();

// üõ†Ô∏è MIDDLEWARE
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('.'));
app.use('/uploads', express.static(UPLOAD_DIR));

// üì¶ –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• (JSON —Ñ–∞–π–ª—ã)
const DB_FILES = {
    users: path.join(DATA_DIR, 'users.json'),
    tracks: path.join(DATA_DIR, 'tracks.json'),
    likes: path.join(DATA_DIR, 'likes.json'),
    stats: path.join(DATA_DIR, 'stats.json')
};

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ë–î –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
Object.values(DB_FILES).forEach(file => {
    if (!fs.existsSync(file)) {
        fs.writeFileSync(file, JSON.stringify([]));
    }
});

// üìã –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î
const readDB = (dbName) => {
    try {
        const data = fs.readFileSync(DB_FILES[dbName], 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${dbName}:`, error);
        return [];
    }
};

const writeDB = (dbName, data) => {
    try {
        fs.writeFileSync(DB_FILES[dbName], JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${dbName}:`, error);
        return false;
    }
};

// üîê MIDDLEWARE –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
};

// üì§ –ù–ê–°–¢–†–û–ô–ö–ê MULTER –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        let uploadPath = UPLOAD_DIR;
        
        if (file.fieldname === 'avatar') {
            uploadPath = AVATARS_DIR;
        } else if (file.fieldname === 'cover') {
            uploadPath = COVERS_DIR;
        } else if (file.fieldname === 'audio') {
            uploadPath = TRACKS_DIR;
        }
        
        cb(null, uploadPath);
    },
    filename: function (req, file, cb) {
        const uniqueName = uuidv4() + path.extname(file.originalname);
        cb(null, uniqueName);
    }
});

const fileFilter = (req, file, cb) => {
    if (file.fieldname === 'audio') {
        // –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã
        if (file.mimetype.startsWith('audio/')) {
            cb(null, true);
        } else {
            cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã'), false);
        }
    } else {
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), false);
        }
    }
};

const upload = multer({ 
    storage: storage,
    fileFilter: fileFilter,
    limits: {
        fileSize: 50 * 1024 * 1024 // 50MB
    }
});

// ================================
// üîê –ú–ê–†–®–†–£–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// ================================

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, password } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!username || !password) {
            return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (username.length < 3 || username.length > 20) {
            return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        if (password.length < 4) {
            return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞' });
        }

        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è' });
        }

        const users = readDB('users');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (users.find(u => u.username.toLowerCase() === username.toLowerCase())) {
            return res.status(409).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: uuidv4(),
            username,
            password: hashedPassword,
            displayName: username,
            avatar: null,
            cover: null,
            createdAt: new Date().toISOString(),
            tracksCount: 0,
            followersCount: 0,
            followingCount: 0
        };

        users.push(newUser);
        writeDB('users', users);

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: newUser.id, username: newUser.username },
            JWT_SECRET,
            { expiresIn: '30d' }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è
        const { password: _, ...userWithoutPassword } = newUser;

        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            user: userWithoutPassword,
            token
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—Ö–æ–¥
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const users = readDB('users');
        const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());

        if (!user) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const isValidPassword = await bcrypt.compare(password, user.password);
        if (!isValidPassword) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: user.id, username: user.username },
            JWT_SECRET,
            { expiresIn: '30d' }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è
        const { password: _, ...userWithoutPassword } = user;

        res.json({
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
            user: userWithoutPassword,
            token
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/me', authenticateToken, (req, res) => {
    try {
        const users = readDB('users');
        const user = users.find(u => u.id === req.user.userId);

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const { password: _, ...userWithoutPassword } = user;
        res.json({ user: userWithoutPassword });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ================================
// üéµ –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –¢–†–ï–ö–û–í
// ================================

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞
app.post('/api/tracks/upload', authenticateToken, upload.fields([
    { name: 'audio', maxCount: 1 },
    { name: 'cover', maxCount: 1 }
]), (req, res) => {
    try {
        const { title, artist, genre, mood, description, isPublic } = req.body;

        if (!req.files || !req.files.audio) {
            return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        if (!title || !artist) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const audioFile = req.files.audio[0];
        const coverFile = req.files.cover ? req.files.cover[0] : null;

        const tracks = readDB('tracks');
        
        const newTrack = {
            id: uuidv4(),
            title: title.trim(),
            artist: artist.trim(),
            genre: genre || null,
            mood: mood || null,
            description: description || null,
            isPublic: isPublic === 'true',
            audioUrl: `/uploads/tracks/${audioFile.filename}`,
            coverUrl: coverFile ? `/uploads/covers/${coverFile.filename}` : null,
            duration: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º
            uploadedBy: req.user.userId,
            uploadedAt: new Date().toISOString(),
            plays: 0,
            likes: 0
        };

        tracks.push(newTrack);
        writeDB('tracks', tracks);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const users = readDB('users');
        const userIndex = users.findIndex(u => u.id === req.user.userId);
        if (userIndex !== -1) {
            users[userIndex].tracksCount = tracks.filter(t => t.uploadedBy === req.user.userId).length;
            writeDB('users', users);
        }

        res.status(201).json({
            message: '–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
            track: newTrack
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤
app.get('/api/tracks', (req, res) => {
    try {
        const { filter = 'recent', limit = 20, offset = 0, search, userId } = req.query;
        
        let tracks = readDB('tracks');
        const users = readDB('users');

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∫ —Ç—Ä–µ–∫–∞–º
        tracks = tracks.map(track => {
            const user = users.find(u => u.id === track.uploadedBy);
            return {
                ...track,
                uploader: user ? {
                    id: user.id,
                    username: user.username,
                    displayName: user.displayName,
                    avatar: user.avatar
                } : null
            };
        });

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (userId) {
            tracks = tracks.filter(track => track.uploadedBy === userId);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            tracks = tracks.filter(track => track.isPublic);
        }

        // –ü–æ–∏—Å–∫
        if (search) {
            const searchLower = search.toLowerCase();
            tracks = tracks.filter(track => 
                track.title.toLowerCase().includes(searchLower) ||
                track.artist.toLowerCase().includes(searchLower) ||
                (track.description && track.description.toLowerCase().includes(searchLower))
            );
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        switch (filter) {
            case 'popular':
                tracks.sort((a, b) => (b.plays + b.likes) - (a.plays + a.likes));
                break;
            case 'recent':
            default:
                tracks.sort((a, b) => new Date(b.uploadedAt) - new Date(a.uploadedAt));
                break;
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const startIndex = parseInt(offset);
        const endIndex = startIndex + parseInt(limit);
        const paginatedTracks = tracks.slice(startIndex, endIndex);

        res.json({
            tracks: paginatedTracks,
            total: tracks.length,
            hasMore: endIndex < tracks.length
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ ID
app.get('/api/tracks/:id', (req, res) => {
    try {
        const tracks = readDB('tracks');
        const users = readDB('users');
        
        const track = tracks.find(t => t.id === req.params.id);
        
        if (!track) {
            return res.status(404).json({ error: '–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∏–≤—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const uploader = users.find(u => u.id === track.uploadedBy);
        const trackWithUploader = {
            ...track,
            uploader: uploader ? {
                id: uploader.id,
                username: uploader.username,
                displayName: uploader.displayName,
                avatar: uploader.avatar
            } : null
        };

        res.json({ track: trackWithUploader });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞' });
    }
});

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
app.post('/api/tracks/:id/play', (req, res) => {
    try {
        const tracks = readDB('tracks');
        const trackIndex = tracks.findIndex(t => t.id === req.params.id);
        
        if (trackIndex === -1) {
            return res.status(404).json({ error: '–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        tracks[trackIndex].plays = (tracks[trackIndex].plays || 0) + 1;
        writeDB('tracks', tracks);

        res.json({ message: '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ', plays: tracks[trackIndex].plays });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π' });
    }
});

console.log('\nüéµ SoundWave Server –∑–∞–ø—É—â–µ–Ω!');
console.log(`üì° –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
console.log('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n');

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)' });
        }
    }
    
    res.status(500).json({ error: error.message });
});
