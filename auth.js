// üìÑ –§–ê–ô–õ: js/auth.js - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// =============================================================================

class AuthManager {
    constructor() {
        this.storage = new StorageManager();
        this.currentUser = null;
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (this.storage.token) {
            this.loadCurrentUser();
        }

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.addEventListener('auth:login', (e) => this.handleLogin(e.detail));
        window.addEventListener('auth:logout', () => this.handleLogout());
    }

    async loadCurrentUser() {
        try {
            const response = await this.storage.getCurrentUser();
            this.currentUser = response.user;
            this.updateUI();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.handleLogout();
        }
    }

    async register(username, password) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const usernameError = Utils.validateUsername(username);
        if (usernameError) throw new Error(usernameError);

        const passwordError = Utils.validatePassword(password);
        if (passwordError) throw new Error(passwordError);

        try {
            const response = await this.storage.register(username, password);
            
            this.storage.setToken(response.token);
            this.currentUser = response.user;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Ö–æ–¥–µ
            window.dispatchEvent(new CustomEvent('auth:login', { 
                detail: { user: this.currentUser, isNewUser: true } 
            }));

            return response;
        } catch (error) {
            throw error;
        }
    }

    async login(username, password) {
        try {
            const response = await this.storage.login(username, password);
            
            this.storage.setToken(response.token);
            this.currentUser = response.user;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Ö–æ–¥–µ
            window.dispatchEvent(new CustomEvent('auth:login', { 
                detail: { user: this.currentUser, isNewUser: false } 
            }));

            return response;
        } catch (error) {
            throw error;
        }
    }

    logout() {
        this.storage.removeToken();
        this.storage.clearCache();
        this.currentUser = null;
        
        window.dispatchEvent(new CustomEvent('auth:logout'));
    }

    handleLogin(detail) {
        this.updateUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = detail.isNewUser 
            ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${detail.user.username}!` 
            : `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${detail.user.username}!`;
            
        window.UI.showToast(message, 'success');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        window.UI.switchTab('home');
    }

    handleLogout() {
        this.currentUser = null;
        this.updateUI();
        window.UI.showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const app = Utils.$('#app');
        const welcomeScreen = Utils.$('#welcomeScreen');
        const mainApp = Utils.$('#mainApp');
        
        welcomeScreen?.classList.remove('hidden');
        mainApp?.classList.add('hidden');
    }

    updateUI() {
        const isLoggedIn = !!this.currentUser;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const headerAvatar = Utils.$('#headerAvatar');
        const avatarText = Utils.$('#headerAvatar .avatar-text');
        
        if (headerAvatar && this.currentUser) {
            if (avatarText) {
                avatarText.textContent = this.currentUser.username[0].toUpperCase();
            }
            
            if (this.currentUser.avatar) {
                headerAvatar.style.backgroundImage = `url(${this.currentUser.avatar})`;
                headerAvatar.style.backgroundSize = 'cover';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        this.updateProfile();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const authRequired = Utils.$$('.auth-required');
        authRequired.forEach(el => {
            el.classList.toggle('hidden', isLoggedIn);
        });
    }

    updateProfile() {
        if (!this.currentUser) return;

        const user = this.currentUser;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const elements = {
            '#profileDisplayName': user.displayName || user.username,
            '#profileUsername': `@${user.username}`,
            '#profileTracksCount': user.tracksCount || 0,
            '#profileFollowersCount': user.followersCount || 0,
            '#profileFollowingCount': user.followingCount || 0,
            '#profileAvatarText': user.username[0].toUpperCase()
        };

        Object.entries(elements).forEach(([selector, value]) => {
            const element = Utils.$(selector);
            if (element) {
                element.textContent = value;
            }
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        const profileAvatar = Utils.$('#profileAvatarLarge');
        if (profileAvatar && user.avatar) {
            profileAvatar.style.backgroundImage = `url(${user.avatar})`;
            profileAvatar.style.backgroundSize = 'cover';
        }
    }

    isLoggedIn() {
        return !!this.currentUser;
    }

    getUser() {
        return this.currentUser;
    }
}
