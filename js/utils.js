// üõ†Ô∏è –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

/**
 * üïí –†–ê–ë–û–¢–ê –°–û –í–†–ï–ú–ï–ù–ï–ú
 */

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ MM:SS
function formatTime(seconds) {
    if (!seconds || isNaN(seconds)) return '0:00';
    
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
    if (diff < 60000) {
        return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    }
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    if (diff < 3600000) {
        const mins = Math.floor(diff / 60000);
        return `${mins} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    }
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–Ω—è –Ω–∞–∑–∞–¥
    if (diff < 86400000) {
        const hours = Math.floor(diff / 3600000);
        return `${hours} —á. –Ω–∞–∑–∞–¥`;
    }
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
    if (diff < 604800000) {
        const days = Math.floor(diff / 86400000);
        return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
    }
    
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function getRelativeTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const rtf = new Intl.RelativeTimeFormat('ru', { numeric: 'auto' });
    
    const diff = date - now;
    const diffInSeconds = Math.floor(diff / 1000);
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    const diffInHours = Math.floor(diffInMinutes / 60);
    const diffInDays = Math.floor(diffInHours / 24);
    
    if (Math.abs(diffInDays) >= 1) {
        return rtf.format(diffInDays, 'day');
    } else if (Math.abs(diffInHours) >= 1) {
        return rtf.format(diffInHours, 'hour');
    } else if (Math.abs(diffInMinutes) >= 1) {
        return rtf.format(diffInMinutes, 'minute');
    } else {
        return rtf.format(diffInSeconds, 'second');
    }
}

/**
 * üìÅ –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò
 */

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function isAudioFile(file) {
    const audioTypes = CONFIG.AUDIO.SUPPORTED_FORMATS;
    const fileName = file.name.toLowerCase();
    return audioTypes.some(type => fileName.endsWith(type.replace('.', '')));
}

function isImageFile(file) {
    return file.type.startsWith('image/');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function getFileExtension(filename) {
    return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';
    
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function compressImage(file, maxWidth = 800, quality = 0.8) {
    return new Promise((resolve) => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const img = new Image();
        
        img.onload = () => {
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            const ratio = Math.min(maxWidth / img.width, maxWidth / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            
            canvas.width = width;
            canvas.height = height;
            
            // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ctx.drawImage(img, 0, 0, width, height);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ blob
            canvas.toBlob(resolve, 'image/jpeg', quality);
        };
        
        img.src = URL.createObjectURL(file);
    });
}

/**
 * üé® –†–ê–ë–û–¢–ê –° –¶–í–ï–¢–ê–ú–ò –ò –ì–†–ê–î–ò–ï–ù–¢–ê–ú–ò
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±–ª–æ–∂–∫–∏
function getRandomGradient() {
    const gradients = window.DEFAULT_GRADIENTS || [
        'linear-gradient(45deg, #667eea 0%, #764ba2 100%)',
        'linear-gradient(45deg, #f093fb 0%, #f5576c 100%)',
        'linear-gradient(45deg, #4facfe 0%, #00f2fe 100%)',
        'linear-gradient(45deg, #43e97b 0%, #38f9d7 100%)'
    ];
    
    return gradients[Math.floor(Math.random() * gradients.length)];
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
function getGradientFromString(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    
    const gradients = window.DEFAULT_GRADIENTS || [];
    const index = Math.abs(hash) % gradients.length;
    return gradients[index];
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getDominantColor(imageUrl) {
    return new Promise((resolve) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        
        img.onload = () => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            let r = 0, g = 0, b = 0;
            let pixelCount = 0;
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for (let i = 0; i < data.length; i += 40) {
                r += data[i];
                g += data[i + 1];
                b += data[i + 2];
                pixelCount++;
            }
            
            r = Math.floor(r / pixelCount);
            g = Math.floor(g / pixelCount);
            b = Math.floor(b / pixelCount);
            
            resolve(`rgb(${r}, ${g}, ${b})`);
        };
        
        img.onerror = () => resolve('#007bff'); // Fallback —Ü–≤–µ—Ç
        img.src = imageUrl;
    });
}

/**
 * üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 */

// Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Throttle —Ñ—É–Ω–∫—Ü–∏—è
function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ touch
function isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞
function get(obj, path, defaultValue = undefined) {
    const keys = path.split('.');
    let result = obj;
    
    for (const key of keys) {
        if (result == null) return defaultValue;
        result = result[key];
    }
    
    return result !== undefined ? result : defaultValue;
}

// –ì–ª—É–±–æ–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
function deepClone(obj) {
    if (obj === null || typeof obj !== 'object') return obj;
    if (obj instanceof Date) return new Date(obj.getTime());
    if (obj instanceof Array) return obj.map(item => deepClone(item));
    if (typeof obj === 'object') {
        const cloned = {};
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                cloned[key] = deepClone(obj[key]);
            }
        }
        return cloned;
    }
}

/**
 * üéµ –†–ê–ë–û–¢–ê –° –ê–£–î–ò–û
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
function getAudioDuration(file) {
    return new Promise((resolve, reject) => {
        const audio = new Audio();
        
        audio.addEventListener('loadedmetadata', () => {
            resolve(audio.duration);
        });
        
        audio.addEventListener('error', reject);
        
        audio.src = URL.createObjectURL(file);
    });
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
function extractAudioMetadata(file) {
    return new Promise((resolve) => {
        const audio = new Audio();
        
        audio.addEventListener('loadedmetadata', () => {
            resolve({
                duration: audio.duration,
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            });
        });
        
        audio.addEventListener('error', () => {
            resolve({ duration: 0 });
        });
        
        audio.src = URL.createObjectURL(file);
    });
}

/**
 * üî§ –†–ê–ë–û–¢–ê –°–û –°–¢–†–û–ö–ê–ú–ò
 */

// –û–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
function truncate(str, length = 50) {
    if (!str || str.length <= length) return str;
    return str.substring(0, length) + '...';
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç HTML —Ç–µ–≥–æ–≤
function stripHtml(str) {
    return str.replace(/<[^>]*>/g, '');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function validateUsername(username) {
    if (!username) return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (username.length < CONFIG.SECURITY.MIN_USERNAME_LENGTH) return `–ú–∏–Ω–∏–º—É–º ${CONFIG.SECURITY.MIN_USERNAME_LENGTH} —Å–∏–º–≤–æ–ª–∞`;
    if (username.length > CONFIG.SECURITY.MAX_USERNAME_LENGTH) return `–ú–∞–∫—Å–∏–º—É–º ${CONFIG.SECURITY.MAX_USERNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`;
    if (CONFIG.SECURITY.FORBIDDEN_USERNAME_CHARS.test(username)) return '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è';
    return null;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
function validatePassword(password) {
    if (!password) return '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (password.length < CONFIG.SECURITY.MIN_PASSWORD_LENGTH) return `–ú–∏–Ω–∏–º—É–º ${CONFIG.SECURITY.MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–∞`;
    return null;
}

/**
 * üì± –†–ê–ë–û–¢–ê –° DOM
 */

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
function $(selector) {
    return document.querySelector(selector);
}

function $(selector) {
    return document.querySelectorAll(selector);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
function toggleClass(element, className, force) {
    if (!element) return;
    if (force !== undefined) {
        element.classList.toggle(className, force);
    } else {
        element.classList.toggle(className);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
function createElement(tag, attributes = {}, content = '') {
    const element = document.createElement(tag);
    
    Object.keys(attributes).forEach(key => {
        if (key === 'className') {
            element.className = attributes[key];
        } else if (key === 'dataset') {
            Object.keys(attributes[key]).forEach(dataKey => {
                element.dataset[dataKey] = attributes[key][dataKey];
            });
        } else {
            element.setAttribute(key, attributes[key]);
        }
    });
    
    if (content) {
        element.innerHTML = content;
    }
    
    return element;
}

/**
 * üåê –†–ê–ë–û–¢–ê –° URL –ò API
 */

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
function buildUrl(base, params = {}) {
    const url = new URL(base, window.location.origin);
    Object.keys(params).forEach(key => {
        if (params[key] !== null && params[key] !== undefined) {
            url.searchParams.append(key, params[key]);
        }
    });
    return url.toString();
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function safeFetch(url, options = {}) {
    try {
        const response = await fetch(url, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        return { data, error: null };
    } catch (error) {
        console.error('Fetch error:', error);
        return { data: null, error: error.message };
    }
}

/**
 * üéØ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
 */
window.Utils = {
    // –í—Ä–µ–º—è
    formatTime,
    formatDate,
    getRelativeTime,
    
    // –§–∞–π–ª—ã
    isAudioFile,
    isImageFile,
    getFileExtension,
    formatFileSize,
    compressImage,
    getAudioDuration,
    extractAudioMetadata,
    
    // –¶–≤–µ—Ç–∞
    getRandomGradient,
    getGradientFromString,
    getDominantColor,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    debounce,
    throttle,
    isMobile,
    isTouchDevice,
    generateId,
    get,
    deepClone,
    
    // –°—Ç—Ä–æ–∫–∏
    truncate,
    stripHtml,
    validateUsername,
    validatePassword,
    
    // DOM
    $,
    $,
    toggleClass,
    createElement,
    
    // API
    buildUrl,
    safeFetch
};
