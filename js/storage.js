// =============================================================================
// üìÑ –§–ê–ô–õ: js/storage.js - –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ API
// =============================================================================

class StorageManager {
    constructor() {
        this.baseURL = 'https://mymusuc.onrender.com/'; // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –±—É–¥–µ—Ç URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render
        this.token = localStorage.getItem('soundwave_token');
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setToken(token) {
        this.token = token;
        localStorage.setItem('soundwave_token', token);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    removeToken() {
        this.token = null;
        localStorage.removeItem('soundwave_token');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    getHeaders(includeAuth = true) {
        const headers = {
            'Content-Type': 'application/json'
        };

        if (includeAuth && this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }

        return headers;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    async apiRequest(endpoint, options = {}) {
        const url = `${this.baseURL}/api${endpoint}`;
        
        const config = {
            method: 'GET',
            ...options,
            headers: {
                ...(options.headers || {}),
                ...(options.method !== 'GET' && !options.body?.constructor?.name?.includes('FormData') ? this.getHeaders() : {})
            }
        };

        if (this.token && !options.skipAuth) {
            if (!config.headers['Authorization']) {
                config.headers['Authorization'] = `Bearer ${this.token}`;
            }
        }

        try {
            const response = await fetch(url, config);
            
            if (response.status === 401) {
                // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                this.removeToken();
                window.dispatchEvent(new CustomEvent('auth:logout'));
                throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
            }

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || `HTTP ${response.status}`);
            }

            return data;
        } catch (error) {
            console.error(`API Error (${endpoint}):`, error);
            throw error;
        }
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===
    
    async register(username, password) {
        return this.apiRequest('/auth/register', {
            method: 'POST',
            body: JSON.stringify({ username, password }),
            skipAuth: true
        });
    }

    async login(username, password) {
        return this.apiRequest('/auth/login', {
            method: 'POST',
            body: JSON.stringify({ username, password }),
            skipAuth: true
        });
    }

    async getCurrentUser() {
        return this.apiRequest('/auth/me');
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –¢–†–ï–ö–û–í ===
    
    async getTracks(params = {}) {
        const queryString = new URLSearchParams(params).toString();
        return this.apiRequest(`/tracks${queryString ? '?' + queryString : ''}`);
    }

    async getTrack(id) {
        return this.apiRequest(`/tracks/${id}`);
    }

    async uploadTrack(formData) {
        const url = `${this.baseURL}/api/tracks/upload`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${this.token}`
            },
            body: formData
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || `HTTP ${response.status}`);
        }

        return data;
    }

    async incrementPlayCount(trackId) {
        return this.apiRequest(`/tracks/${trackId}/play`, {
            method: 'POST'
        });
    }

    // === –õ–û–ö–ê–õ–¨–ù–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) ===
    
    getCachedTracks() {
        try {
            const cached = localStorage.getItem('soundwave_cached_tracks');
            return cached ? JSON.parse(cached) : [];
        } catch {
            return [];
        }
    }

    setCachedTracks(tracks) {
        try {
            localStorage.setItem('soundwave_cached_tracks', JSON.stringify(tracks));
        } catch (error) {
            console.warn('Could not cache tracks:', error);
        }
    }

    clearCache() {
        localStorage.removeItem('soundwave_cached_tracks');
    }
}
